(* Copyright (c) 2015 Afa.L Cheng <afa@afa.moe>

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:
 
   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.
 
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*)

eos = T, {T};

compilation unit = {import directive}, declaration, {declaration};
import directive = IMPORT, IDENTIFIER, eos;

declaration = variable declaration statement | function declaration;
function identifier = USER_FUNCTION_IDENTIFIER | IDENTIFIER;

(* Expression *)
expression = unary expression
           | assignment
           | unary expression, binary operator, unary expression;
unary expression = primary expression;
primary expression = literal | simple name | parenthesized expression | invocation expression;
simple name = VARIABLE_IDENTIFIER;
literal = STRING | REAL | INTEGER | BOOLEAN;
parenthesized expression = '(', expression, ')';
binary operator = AND | OR | XOR | GT | LT | ADD | SUB | MUL | DIV | MOD;
invocation expression = function identifier, ([argument list] | '(', [argument list], ')');
argument list = expression, [',', expression];

(* Function *)
function declaration = function header, function body;
function header = USER_FUNCTION_IDENTIFIER, '(', [formal parameter list], ')';
formal parameter list = {VARIABLE_IDENTIFIER};
function body = block;
block = '{', {statement}, '}';

(* Statement *)
statement = variable declaration statement | embedded statement;
embedded statement = block | empty statement | expression statement | iteration statement | selection statement;

variable declaration statement = VAR, VARIABLE_IDENTIFIER, ['=', primary expression], eos;
empty statement = | eos;
expression statement = statement expression, eos;
statement expression = invocation expression | assignment;
selection expression = if statement;
if statement = IF, '(', expression, ')', embedded statement, [ELSE, embedded statement];
iteration statement = while statement;
while statement = WHILE, '(', expression, ')', embedded statement;

assignment = unary expression, EQ, expression;

