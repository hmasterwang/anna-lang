(* Copyright (c) 2015 Afa.L Cheng <afa@afa.moe>

   Permission is hereby granted, free of charge, to any person obtaining
   a copy of this software and associated documentation files (the
   "Software"), to deal in the Software without restriction, including
   without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to
   permit persons to whom the Software is furnished to do so, subject to
   the following conditions:
 
   The above copyright notice and this permission notice shall be
   included in all copies or substantial portions of the Software.
 
   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
   OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
   WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*)

eos = T, {T};

(* This rule is not accurate. Compilation unit may composed of any number of 
   import directives, variable declaration statement or function definitions in any order.
   This rule is just for the sake of convenience *)
compilation unit = {import directive}, {variable declaration statement}, {function definition}; 
import directive = IMPORT, IDENTIFIER, eos;

function identifier = USER_FUNCTION_IDENTIFIER | IDENTIFIER;

(* Expression *)
expression = binary expression | unary expression | assignment;
binary expression = (binary expression | unary expression), binary operator, (binary expression | unary expression);
unary expression = primary expression;
primary expression = literal| parenthesized expression | invocation expression | simple name ;
simple name = VARIABLE_IDENTIFIER;
literal = STRING | REAL | INTEGER | BOOLEAN;
parenthesized expression = '(', expression, ')';
binary operator = AND | OR | ANDAND | OROR | XOR | GT | LT | ADD | SUB | MUL | DIV | MOD | GE | LE | EE | NE;
invocation expression = function identifier, ([argument list] | '(', [argument list], ')');
argument list = expression, {',', expression};

(* Function *)
function definition = function header, function body;
function header = DEF, USER_FUNCTION_IDENTIFIER, '(', [formal parameter list], ')';
formal parameter list = formal parameter, {',', formal parameter};
formal parameter = VARIABLE_IDENTIFIER;
function body = block;
block = '{', {statement}, '}';

(* Statement *)
statement = variable declaration statement | embedded statement;
embedded statement = block | empty statement | expression statement | iteration statement | selection statement | return statement;

variable declaration statement = VAR, VARIABLE_IDENTIFIER, ['=', primary expression], eos;
empty statement = eos;
expression statement = statement expression, eos;
statement expression = invocation expression | assignment;
selection statement = if statement;
if statement = IF, '(', expression, ')', embedded statement, [ELSE, embedded statement];
iteration statement = while statement;
while statement = WHILE, '(', expression, ')', embedded statement;
return statement = RETURN, [expression], eos;

assignment = simple name, EQ, expression;

